import os
import streamlit as st

# –í–ê–ñ–ù–û: –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥–æ–π Streamlit
st.set_page_config(page_title="–ü–æ–∏—Å–∫ —Å–ø–æ—Ä–Ω—ã—Ö –Ω–∞–ª–æ–≥–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π", layout="wide")

from dotenv import load_dotenv
from langchain_huggingface import HuggingFaceEmbeddings
from langchain_qdrant import QdrantVectorStore
from langchain_openai import ChatOpenAI
import qdrant_client
import re

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(dotenv_path=".env")
PROVIDER_API_KEY = os.getenv("PROVIDER_API_KEY")
QDRANT_URL = os.getenv("QDRANT_URL")
QDRANT_API_KEY = os.getenv("QDRANT_API_KEY")
COLLECTION_NAME = "enciclop"  # –ò–º—è –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ Qdrant

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
@st.cache_resource
def get_embeddings():
    return HuggingFaceEmbeddings(
        model_name="sentence-transformers/paraphrase-multilingual-mpnet-base-v2",
        model_kwargs={'device': 'cpu'},
        encode_kwargs={'normalize_embeddings': True}
    )

embeddings = get_embeddings()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Qdrant
@st.cache_resource
def get_qdrant_client():
    client = qdrant_client.QdrantClient(
        url=QDRANT_URL,
        api_key=QDRANT_API_KEY,
        prefer_grpc=False
    )
    return client

qdrant_client = get_qdrant_client()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
@st.cache_resource
def get_vector_store():
    return QdrantVectorStore(
        client=qdrant_client,
        collection_name=COLLECTION_NAME,
        embedding=embeddings,
    )

vector_store = get_vector_store()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
@st.cache_resource
def get_llm():
    return ChatOpenAI(
        model_name="deepseek/deepseek-r1-0528",
        openai_api_key=PROVIDER_API_KEY,
        openai_api_base="https://api.novita.ai/v3/openai",
        temperature=0.3
    )

llm = get_llm()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
def extract_structured_info(page_content_text, metadata):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–∞–∑–¥–µ–ª, –ø—É–Ω–∫—Ç –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ page_content –∏ source –∏–∑ metadata"""
    source = metadata.get("source", "–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ —É–∫–∞–∑–∞–Ω")
    section = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
    point = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
    # "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∞" –º—ã –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å —Ç–æ, —á—Ç–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è –∫–∞–∫ title
    title = page_content_text # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è

    # –ü—Ä–∏–º–µ—Ä –≤–∞—à–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: "–†–∞–∑–¥–µ–ª: –ë1. –†–∞—Å—Ö–æ–¥—ã ... –ü—É–Ω–∫—Ç –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è: 24. –£—á–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ ..."
    match = re.search(
        r"–†–∞–∑–¥–µ–ª:\s*(?P<section>[^–ü]+?)\s*–ü—É–Ω–∫—Ç –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è:\s*(?P<point_num>\d+(\.\d+)*)\.?\s*(?P<title>.+)",
        page_content_text,
        re.IGNORECASE
    )
    if match:
        section = match.group("section").strip()
        point = match.group("point_num").strip()
        title_candidate = match.group("title").strip()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ title —Å –Ω–æ–º–µ—Ä–∞ –ø—É–Ω–∫—Ç–∞, –∏ –µ—Å–ª–∏ –¥–∞, —Ç–æ —É–¥–∞–ª—è–µ–º –µ–≥–æ
        if title_candidate.lower().startswith(point.lower()):
             title = title_candidate[len(point):].strip(". ")
        else:
             title = title_candidate
    elif page_content_text:
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ, –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–µ regex, –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
        point_match = re.search(r"–ü—É–Ω–∫—Ç –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è[:\s]*(\d+(\.\d+)*)", page_content_text, re.IGNORECASE)
        title_match = re.search(r"–ü—É–Ω–∫—Ç –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è[:\s]*\d+(\.\d+)*\.?\s*(.+)", page_content_text, re.IGNORECASE)

        if point_match and point_match.group(1):
            point = point_match.group(1).strip()
        if title_match and title_match.group(1):
            title = title_match.group(1).strip()
        elif page_content_text:
            title = page_content_text[:150] + "..." if len(page_content_text) > 150 else page_content_text
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —Ä–∞–∑–¥–µ–ª –æ—Ç–¥–µ–ª—å–Ω–æ, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        section_match = re.search(r"–†–∞–∑–¥–µ–ª[:\s]*(.*?)(–ü—É–Ω–∫—Ç –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è|$)", page_content_text, re.IGNORECASE | re.DOTALL)
        if section_match and section_match.group(1):
            section = section_match.group(1).strip().rstrip(',')

    return {
        "section": section,
        "point": point,
        "title": title, # –≠—Ç–æ –±—É–¥–µ—Ç "–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∞ —Å–ø–æ—Ä–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏"
        "source": source,
        "full_content": page_content_text
    }

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
def find_relevant_situations(query, top_k=5):
    """–ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å–ø–æ—Ä–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
    docs_with_scores = vector_store.similarity_search_with_score(query, k=top_k)
    
    results = []
    for doc, score in docs_with_scores:
        info = extract_structured_info(doc.page_content, doc.metadata)
        info["score"] = score
        results.append(info)
    
    results.sort(key=lambda x: x["score"], reverse=True) # Qdrant –æ–±—ã—á–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏
    return results

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit ---
st.title("üîç –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å–ø–æ—Ä–Ω—ã—Ö –Ω–∞–ª–æ–≥–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π")
st.write("–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é, –∏ —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–π–¥–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–ø–æ—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π")

# –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞
query = st.text_area("–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é:", 
                     placeholder="–û–ø–∏—à–∏—Ç–µ —Å–ø–æ—Ä–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é –∏–∑ –≤–∞—à–µ–π –ø—Ä–∞–∫—Ç–∏–∫–∏...",
                     height=150)

# –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞
if st.button("–ù–∞–π—Ç–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏"):
    if not query:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é")
    else:
        with st.spinner("–ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π..."):
            # –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
            situations = find_relevant_situations(query, top_k=5)
            
            if not situations:
                st.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π –¥–ª—è –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
            else:
                st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(situations)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π")
                
                # –ü–æ–∫–∞–∑–∞—Ç—å —Å—ã—Ä—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
                with st.expander("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏"):
                    for i, sit in enumerate(situations, 1):
                        st.subheader(f"–°–∏—Ç—É–∞—Ü–∏—è #{i}")
                        st.write(f"**–†–∞–∑–¥–µ–ª:** {sit['section']}")
                        st.write(f"**–ü—É–Ω–∫—Ç:** {sit['point']}")
                        st.write(f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {sit['title']}")
                        st.write(f"**–ò—Å—Ç–æ—á–Ω–∏–∫:** {sit['source']}")
                        st.write(f"**–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å:** {sit['score']:.2f}")
                        st.divider()
                
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞
                with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã..."):
                    report = generate_situation_report(situations, query)
                
                # –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç
                st.subheader("–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º —Å–∏—Ç—É–∞—Ü–∏—è–º")
                st.markdown(report)

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
st.sidebar.title("test")
st.sidebar.info("""

""")

st.sidebar.divider()
st.sidebar.markdown("""
<div style='font-size: 0.875em; color: gray;'>
    ¬©Prozorovskiy Dmitriy.
    Date: {current_date}
</div>
""".format(current_date=st.session_state.get("current_date", "01.03.2025")), 
unsafe_allow_html=True)
