import os
import streamlit as st

# –í–ê–ñ–ù–û: –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥–æ–π Streamlit
st.set_page_config(page_title="–ü–æ–∏—Å–∫ —Å–ø–æ—Ä–Ω—ã—Ö –Ω–∞–ª–æ–≥–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π", layout="wide")

from dotenv import load_dotenv
from langchain_huggingface import HuggingFaceEmbeddings
from langchain_qdrant import QdrantVectorStore
from langchain_openai import ChatOpenAI
import qdrant_client
import re

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(dotenv_path=".env")
PROVIDER_API_KEY = os.getenv("PROVIDER_API_KEY")
QDRANT_URL = os.getenv("QDRANT_URL")
QDRANT_API_KEY = os.getenv("QDRANT_API_KEY")
COLLECTION_NAME = "enciclop"  # –ò–º—è –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ Qdrant

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
@st.cache_resource
def get_embeddings():
    return HuggingFaceEmbeddings(
        model_name="sentence-transformers/paraphrase-multilingual-mpnet-base-v2",
        model_kwargs={'device': 'cpu'},
        encode_kwargs={'normalize_embeddings': True}
    )

embeddings = get_embeddings()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Qdrant
@st.cache_resource
def get_qdrant_client():
    client = qdrant_client.QdrantClient(
        url=QDRANT_URL,
        api_key=QDRANT_API_KEY,
        prefer_grpc=False
    )
    return client

qdrant_client = get_qdrant_client()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
@st.cache_resource
def get_vector_store():
    return QdrantVectorStore(
        client=qdrant_client,
        collection_name=COLLECTION_NAME,
        embeddings=embeddings,
    )

vector_store = get_vector_store()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
@st.cache_resource
def get_llm():
    return ChatOpenAI(
        model_name="deepseek/deepseek-r1-0528",
        openai_api_key=PROVIDER_API_KEY,
        openai_api_base="https://api.novita.ai/v3/openai",
        temperature=0.3
    )

llm = get_llm()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
def extract_structured_info(metadata):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–∞–∑–¥–µ–ª, –ø—É–Ω–∫—Ç –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    # –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞: "–†–∞–∑–¥–µ–ª 2.1, –ü—É–Ω–∫—Ç 2.1.3: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏"
    source = metadata.get("source", "")
    content = metadata.get("content", "")
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    section = metadata.get("section", "")
    point = metadata.get("point", "")
    title = metadata.get("title", "")
    
    # –ï—Å–ª–∏ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —è–≤–Ω—ã—Ö –ø–æ–ª–µ–π, –ø—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∏–∑ —Ç–µ–∫—Å—Ç–∞
    if not section or not point:
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–∏–ø–∞ "–†–∞–∑–¥–µ–ª X.X" –∏–ª–∏ "–ü—É–Ω–∫—Ç X.X.X"
        section_match = re.search(r"–†–∞–∑–¥–µ–ª\s*([\d.]+)", content or "")
        point_match = re.search(r"–ü—É–Ω–∫—Ç\s*([\d.]+)", content or "")
        
        if section_match:
            section = section_match.group(1)
        if point_match:
            point = point_match.group(1)
    
    # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—á–∞–ª–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if not title and content:
        title = content[:100] + "..." if len(content) > 100 else content
    
    return {
        "section": section,
        "point": point,
        "title": title,
        "source": source
    }

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
def find_relevant_situations(query, top_k=5):
    """–ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å–ø–æ—Ä–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
    # –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ
    docs = vector_store.similarity_search(query, k=top_k)
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    results = []
    for doc in docs:
        info = extract_structured_info(doc.metadata)
        info["score"] = doc.metadata.get("score", 0)  # –û—Ü–µ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        results.append(info)
    
    return results

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º —Å–∏—Ç—É–∞—Ü–∏—è–º
def generate_situation_report(situations, query):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å –ø–æ–º–æ—â—å—é LLM"""
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM
    context = "–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å–ø–æ—Ä–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏:\n"
    for i, sit in enumerate(situations, 1):
        context += f"{i}. –†–∞–∑–¥–µ–ª: {sit['section']}, –ü—É–Ω–∫—Ç: {sit['point']}, –ù–∞–∑–≤–∞–Ω–∏–µ: {sit['title']}\n"
    
    # –ü—Ä–æ–º–ø—Ç –¥–ª—è LLM
    prompt = f"""
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–∏—Å–∞–ª —Å–ª–µ–¥—É—é—â—É—é —Å–∏—Ç—É–∞—Ü–∏—é: 
    "{query}"
    
    {context}
    
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ø–æ—Ä–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ —Å–æ—Å—Ç–∞–≤—å –æ—Ç—á–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
    1. –î–ª—è –∫–∞–∂–¥–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ —É–∫–∞–∂–∏:
       - –†–∞–∑–¥–µ–ª –∏ –ø—É–Ω–∫—Ç
       - –ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏
       - –ü–æ—á–µ–º—É –æ–Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
    2. –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–µ —Å —ç—Ç–∏–º–∏ —Å–∏—Ç—É–∞—Ü–∏—è–º–∏.
    
    –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
    """
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
    response = llm.invoke(prompt)
    return response.content

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit ---
st.title("üîç –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å–ø–æ—Ä–Ω—ã—Ö –Ω–∞–ª–æ–≥–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π")
st.write("–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é, –∏ —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–π–¥–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–ø–æ—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π")

# –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞
query = st.text_area("–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é:", 
                     placeholder="–û–ø–∏—à–∏—Ç–µ —Å–ø–æ—Ä–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é –∏–∑ –≤–∞—à–µ–π –ø—Ä–∞–∫—Ç–∏–∫–∏...",
                     height=150)

# –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞
if st.button("–ù–∞–π—Ç–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏"):
    if not query:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é")
    else:
        with st.spinner("–ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π..."):
            # –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
            situations = find_relevant_situations(query, top_k=5)
            
            if not situations:
                st.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π –¥–ª—è –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
            else:
                st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(situations)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π")
                
                # –ü–æ–∫–∞–∑–∞—Ç—å —Å—ã—Ä—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
                with st.expander("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏"):
                    for i, sit in enumerate(situations, 1):
                        st.subheader(f"–°–∏—Ç—É–∞—Ü–∏—è #{i}")
                        st.write(f"**–†–∞–∑–¥–µ–ª:** {sit['section']}")
                        st.write(f"**–ü—É–Ω–∫—Ç:** {sit['point']}")
                        st.write(f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {sit['title']}")
                        st.write(f"**–ò—Å—Ç–æ—á–Ω–∏–∫:** {sit['source']}")
                        st.write(f"**–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å:** {sit['score']:.2f}")
                        st.divider()
                
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞
                with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã..."):
                    report = generate_situation_report(situations, query)
                
                # –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç
                st.subheader("–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º —Å–∏—Ç—É–∞—Ü–∏—è–º")
                st.markdown(report)

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
st.sidebar.title("–û —Å–∏—Å—Ç–µ–º–µ")
st.sidebar.info("""
–≠—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ø–æ—Ä–Ω—ã—Ö –Ω–∞–ª–æ–≥–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π –∏ –Ω–∞—Ö–æ–¥–∏—Ç 
—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π —Å–ø–æ—Ä–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞.

**–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
1. –í—ã –æ–ø–∏—Å—ã–≤–∞–µ—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é –∏–∑ –ø—Ä–∞–∫—Ç–∏–∫–∏
2. –°–∏—Å—Ç–µ–º–∞ –∏—â–µ—Ç –ø–æ—Ö–æ–∂–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
3. LLM –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç
""")

st.sidebar.divider()
st.sidebar.markdown("""
<div style='font-size: 0.875em; color: gray;'>
    ¬©Prozorovskiy Dmitriy.
    Date: {current_date}
</div>
""".format(current_date=st.session_state.get("current_date", "01.03.2025")), 
unsafe_allow_html=True)