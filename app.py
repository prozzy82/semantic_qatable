import os
import streamlit as st
import datetime

# –í–ê–ñ–ù–û: –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥–æ–π Streamlit
st.set_page_config(page_title="–ü–æ–∏—Å–∫ —Å–ø–æ—Ä–Ω—ã—Ö –Ω–∞–ª–æ–≥–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π", layout="wide")

from dotenv import load_dotenv
from langchain_huggingface import HuggingFaceEmbeddings
from langchain_qdrant import QdrantVectorStore
from langchain_openai import ChatOpenAI
import qdrant_client
import re

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(dotenv_path=".env")
PROVIDER_API_KEY = os.getenv("PROVIDER_API_KEY")
QDRANT_URL = os.getenv("QDRANT_URL")
QDRANT_API_KEY = os.getenv("QDRANT_API_KEY")
COLLECTION_NAME = "enciclop"  # –ò–º—è –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ Qdrant

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
@st.cache_resource
def get_embeddings():
    return HuggingFaceEmbeddings(
        model_name="sentence-transformers/paraphrase-multilingual-mpnet-base-v2",
        model_kwargs={'device': 'cpu'},
        encode_kwargs={'normalize_embeddings': True}
    )

embeddings = get_embeddings()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Qdrant
@st.cache_resource
def get_qdrant_client():
    client = qdrant_client.QdrantClient(
        url=QDRANT_URL,
        api_key=QDRANT_API_KEY,
        prefer_grpc=False
    )
    return client

qdrant_client = get_qdrant_client()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
@st.cache_resource
def get_vector_store():
    return QdrantVectorStore(
        client=qdrant_client,
        collection_name=COLLECTION_NAME,
        embedding=embeddings,
    )

vector_store = get_vector_store()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
def extract_structured_info(page_content_text, metadata):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–∞–∑–¥–µ–ª, –ø—É–Ω–∫—Ç –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ page_content –∏ source –∏–∑ metadata"""
    source = metadata.get("source", "–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ —É–∫–∞–∑–∞–Ω")
    # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    section = "–†–∞–∑–¥–µ–ª –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
    point = "–ü—É–Ω–∫—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
    title = page_content_text # –í —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—Å—è

    # –û—Å–Ω–æ–≤–Ω–æ–π regex –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    # –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: "–†–∞–∑–¥–µ–ª: [–¢–ï–ö–°–¢_–†–ê–ó–î–ï–õ–ê] –ü—É–Ω–∫—Ç –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è: [–ù–û–ú–ï–†_–ü–£–ù–ö–¢–ê –æ–ø—Ü_—Ç–æ—á–∫–∞] [–¢–ï–ö–°–¢_–ù–ê–ó–í–ê–ù–ò–Ø_–ü–£–ù–ö–¢–ê]"
    pattern = re.compile(
        r"–†–∞–∑–¥–µ–ª:\s*(?P<section>.*?)\s*"
        r"–ü—É–Ω–∫—Ç –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è:\s*(?P<point_num>\d[\d\.]*[\d])\s*\.?" # –ù–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞, –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ—á–∫–∏, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Ü–∏—Ñ—Ä–æ–π
        r"\s*(?P<title>.*)", # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ - –Ω–∞–∑–≤–∞–Ω–∏–µ, –≤–∫–ª—é—á–∞—è –ø—Ä–æ–±–µ–ª—ã –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        re.IGNORECASE | re.DOTALL # DOTALL —á—Ç–æ–±—ã .* –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–ª –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    )
    match = pattern.search(page_content_text)

    if match:
        section_candidate = match.group("section").strip()
        point_candidate = match.group("point_num").strip()
        title_candidate = match.group("title").strip() # .strip() —É–±–µ—Ä–µ—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ –Ω–∞–∑–≤–∞–Ω–∏—è

        if section_candidate:
            section = section_candidate
        if point_candidate:
            point = point_candidate
        
        if title_candidate: # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –±—ã–ª–æ –∑–∞—Ö–≤–∞—á–µ–Ω–æ –∫–∞–∫ title –∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ –ø–æ—Å–ª–µ strip
            title = title_candidate
        elif point_candidate: # –ï—Å–ª–∏ title –ø—É—Å—Ç (–∏–ª–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã), –Ω–æ –µ—Å—Ç—å –ø—É–Ω–∫—Ç
            title = f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—É–Ω–∫—Ç–∞ {point_candidate} –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω–æ (–≤–æ–∑–º–æ–∂–Ω–æ, –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ç–µ–∫—Å—Ç–µ)."
        # –ï—Å–ª–∏ –∏ title_candidate –ø—É—Å—Ç, –∏ point_candidate –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω (—Ö–æ—Ç—è regex —Ç—Ä–µ–±—É–µ—Ç point_num),
        # —Ç–æ title –æ—Å—Ç–∞–Ω–µ—Ç—Å—è page_content_text.
            
    else:
        # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π regex –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —Ö–æ—Ç—è –±—ã –ø—É–Ω–∫—Ç –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ —Ä–∞–∑–¥–µ–ª–∞
        fallback_pattern = re.compile(
            r"–ü—É–Ω–∫—Ç –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è:\s*(?P<point_num>\d[\d\.]*[\d])\s*\.?"
            r"\s*(?P<title>.*)",
            re.IGNORECASE | re.DOTALL
        )
        fallback_match = fallback_pattern.search(page_content_text)
        if fallback_match:
            point_candidate = fallback_match.group("point_num").strip()
            title_candidate = fallback_match.group("title").strip()

            if point_candidate:
                point = point_candidate
            if title_candidate:
                title = title_candidate
            elif point_candidate: # Title –ø—É—Å—Ç, –Ω–æ –ø—É–Ω–∫—Ç –µ—Å—Ç—å
                 title = f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—É–Ω–∫—Ç–∞ {point_candidate} –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω–æ (–≤–æ–∑–º–æ–∂–Ω–æ, –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ç–µ–∫—Å—Ç–µ)."
            # –†–∞–∑–¥–µ–ª –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è "–†–∞–∑–¥–µ–ª –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω" –∏–ª–∏ –º–æ–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –Ω–∞–π—Ç–∏ –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ,
            # –Ω–æ —ç—Ç–æ —É—Å–ª–æ–∂–Ω–∏—Ç –ª–æ–≥–∏–∫—É –±–µ–∑ –≥–∞—Ä–∞–Ω—Ç–∏–∏ —É—Å–ø–µ—Ö–∞, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç —Å–∏–ª—å–Ω–æ –≤–∞—Ä—å–∏—Ä—É–µ—Ç—Å—è.

    return {
        "section": section,
        "point": point,
        "title": title, # –≠—Ç–æ "–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∞ —Å–ø–æ—Ä–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏"
        "source": source,
        "score": 0, # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º, –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–æ –ø–æ–∑–∂–µ
        "full_content": page_content_text
    }

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
def find_relevant_situations(query, top_k=5):
    """–ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å–ø–æ—Ä–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
    docs_with_scores = vector_store.similarity_search_with_score(query, k=top_k)
    
    results = []
    for doc, score in docs_with_scores:
        info = extract_structured_info(doc.page_content, doc.metadata)
        info["score"] = score # –û—Ü–µ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –æ—Ç Qdrant
        results.append(info)
    
    # Qdrant –æ–±—ã—á–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ score (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É –¥–ª—è similarity)
    # –ï—Å–ª–∏ –Ω–µ—Ç, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å results.sort(key=lambda x: x["score"], reverse=True)
    return results

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit ---
st.title("üîç –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å–ø–æ—Ä–Ω—ã—Ö –Ω–∞–ª–æ–≥–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π")
st.write("–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é, –∏ —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–π–¥–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ø—É–Ω–∫—Ç–æ–≤ —Å–ø–æ—Ä–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π.")

# –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞
query = st.text_area("–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é:", 
                     placeholder="–ü—Ä–∏–º–µ—Ä: –ú–æ–∂–Ω–æ –ª–∏ —É—á–µ—Å—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ —Ç–∞–∫—Å–∏ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–µ...",
                     height=150)

if "current_date" not in st.session_state:
    st.session_state.current_date = datetime.date.today().strftime("%d.%m.%Y")

# –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞
if st.button("–ù–∞–π—Ç–∏ —Å–∏—Ç—É–∞—Ü–∏–∏"):
    if not query:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é")
    else:
        with st.spinner("–ò–¥–µ—Ç –ø–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π..."):
            situations = find_relevant_situations(query, top_k=5) # –ú–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å top_k
            
            if not situations:
                st.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å.")
            else:
                st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(situations)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π –ø—É–Ω–∫—Ç–æ–≤:")
                
                # –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π –ø—É–Ω–∫—Ç–æ–≤
                for i, sit in enumerate(situations, 1):
                    # sit['title'] —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∞
                    st.markdown(f"{i}. **{sit['title']}**")
                    # –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞ –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å):
                    # st.caption(f"   (–ü—É–Ω–∫—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞: {sit['point']}, –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {sit['score']:.2f})")


# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
st.sidebar.title("–û —Å–∏—Å—Ç–µ–º–µ")
st.sidebar.info(
    """
    –≠—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π
    –ø—É–Ω–∫—Ç–æ–≤ —Å–ø–æ—Ä–Ω—ã—Ö –Ω–∞–ª–æ–≥–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.
    """
)
st.sidebar.divider()
st.sidebar.markdown(f"""
<div style='font-size: 0.875em; color: gray;'>
    ¬© Prozorovskiy Dmitriy.
    –î–∞—Ç–∞: {st.session_state.current_date}
</div>
""", 
unsafe_allow_html=True)
